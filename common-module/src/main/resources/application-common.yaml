logging:
  level:
    org:
      #  EnvVar
      springframework: ${LOGGING_LEVEL:WARN}

server:
  port: 0

eureka:
  #  EnvVar Ov
  host: ${DISCOVERY_HOST:localhost}
  #  EnvVar Ov
  port: ${DISCOVERY_PORT:8761}
  client:
    serviceUrl:
      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.host}:${eureka.port}/eureka/
  instance:
    preferIpAddress: true

management:
  endpoints:
    web:
      exposure:
        include: env, configprops
  endpoint:
    env:
      show-values: always
    configprops:
      show-values: always

spring:
  security:
    user:
      #  EnvVar Se
      name: ${SECURITY_USER_NAME:user}
      #  EnvVar Se
      password: ${SECURITY_PASSWORD:password}

  web:
    locale: en_EN
    locale-resolver: fixed

  main:
    allow-circular-references: true

  kafka:
    #  EnvVar Ov
    bootstrap-servers:
      - ${KAFKA_URI}
    admin:
      fail-fast: true
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: com.buoyancy.*,org.acme,org.springframework
          deserializer:
            value:
              delegate:
                class: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # Automatically adds type information to message headers

  mail:
    host: smtp.gmail.com
    port: 587
    #  EnvVar Se
    username: ${MAIL_USERNAME}
    #  EnvVar Se
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  datasource:
    #  EnvVar Ov
    host: ${DB_HOST:localhost:5432}
    #  EnvVar
    database-name: ${DB_NAME:foodtech}
    base-url: postgresql://${spring.datasource.host}/${spring.datasource.database-name}
    driver-class-name: org.postgresql.Driver
    username: postgres
    #  EnvVar Se
    password: ${DB_PASSWORD}
    url: jdbc:${spring.datasource.base-url}
    show-sql: true

  flyway:
    url: jdbc:${spring.datasource.base-url}
    locations: classpath:migration
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}

  data:
    redis:
      #  EnvVar Ov
      host: ${REDIS_HOST:localhost}
      #  EnvVar Ov
      port: ${REDIS_PORT:6379}
  cache:
    type: redis
    redis:
      timeout: 60s